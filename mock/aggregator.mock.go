// Code generated by MockGen. DO NOT EDIT.
// Source: aggregator.go
//
// Generated by this command:
//
//	mockgen -source=aggregator.go -destination=../mock/aggregator.mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/chenmingyong0423/go-mongox/types"
	options "go.mongodb.org/mongo-driver/mongo/options"
	gomock "go.uber.org/mock/gomock"
)

// MockiAggregator is a mock of iAggregator interface.
type MockiAggregator[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockiAggregatorMockRecorder[T]
}

// MockiAggregatorMockRecorder is the mock recorder for MockiAggregator.
type MockiAggregatorMockRecorder[T any] struct {
	mock *MockiAggregator[T]
}

// NewMockiAggregator creates a new mock instance.
func NewMockiAggregator[T any](ctrl *gomock.Controller) *MockiAggregator[T] {
	mock := &MockiAggregator[T]{ctrl: ctrl}
	mock.recorder = &MockiAggregatorMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiAggregator[T]) EXPECT() *MockiAggregatorMockRecorder[T] {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockiAggregator[T]) Aggregate(ctx context.Context, opts ...*options.AggregateOptions) ([]*T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Aggregate", varargs...)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockiAggregatorMockRecorder[T]) Aggregate(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockiAggregator[T])(nil).Aggregate), varargs...)
}

// AggregateWithCallback mocks base method.
func (m *MockiAggregator[T]) AggregateWithCallback(ctx context.Context, handler types.ResultHandler, opts ...*options.AggregateOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, handler}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AggregateWithCallback", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AggregateWithCallback indicates an expected call of AggregateWithCallback.
func (mr *MockiAggregatorMockRecorder[T]) AggregateWithCallback(ctx, handler any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, handler}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateWithCallback", reflect.TypeOf((*MockiAggregator[T])(nil).AggregateWithCallback), varargs...)
}
