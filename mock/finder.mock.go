// Code generated by MockGen. DO NOT EDIT.
// Source: finder.go
//
// Generated by this command:
//
//	mockgen -source=finder.go -destination=../mock/finder.mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	options "go.mongodb.org/mongo-driver/mongo/options"
	gomock "go.uber.org/mock/gomock"
)

// MockiFinder is a mock of iFinder interface.
type MockiFinder[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockiFinderMockRecorder[T]
}

// MockiFinderMockRecorder is the mock recorder for MockiFinder.
type MockiFinderMockRecorder[T any] struct {
	mock *MockiFinder[T]
}

// NewMockiFinder creates a new mock instance.
func NewMockiFinder[T any](ctrl *gomock.Controller) *MockiFinder[T] {
	mock := &MockiFinder[T]{ctrl: ctrl}
	mock.recorder = &MockiFinderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiFinder[T]) EXPECT() *MockiFinderMockRecorder[T] {
	return m.recorder
}

// Count mocks base method.
func (m *MockiFinder[T]) Count(ctx context.Context, opts ...*options.CountOptions) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockiFinderMockRecorder[T]) Count(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockiFinder[T])(nil).Count), varargs...)
}

// Distinct mocks base method.
func (m *MockiFinder[T]) Distinct(ctx context.Context, fieldName string, opts ...*options.DistinctOptions) ([]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, fieldName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Distinct indicates an expected call of Distinct.
func (mr *MockiFinderMockRecorder[T]) Distinct(ctx, fieldName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, fieldName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockiFinder[T])(nil).Distinct), varargs...)
}

// DistinctWithParse mocks base method.
func (m *MockiFinder[T]) DistinctWithParse(ctx context.Context, fieldName string, result any, opts ...*options.DistinctOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, fieldName, result}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistinctWithParse", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistinctWithParse indicates an expected call of DistinctWithParse.
func (mr *MockiFinderMockRecorder[T]) DistinctWithParse(ctx, fieldName, result any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, fieldName, result}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistinctWithParse", reflect.TypeOf((*MockiFinder[T])(nil).DistinctWithParse), varargs...)
}

// Find mocks base method.
func (m *MockiFinder[T]) Find(ctx context.Context, opts ...*options.FindOptions) ([]*T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockiFinderMockRecorder[T]) Find(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockiFinder[T])(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockiFinder[T]) FindOne(ctx context.Context, opts ...*options.FindOneOptions) (*T, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockiFinderMockRecorder[T]) FindOne(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockiFinder[T])(nil).FindOne), varargs...)
}
