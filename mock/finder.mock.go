// Code generated by MockGen. DO NOT EDIT.
// Source: finder.go
//
// Generated by this command:
//
//	mockgen -source=finder.go -destination=../mock/finder.mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	options "go.mongodb.org/mongo-driver/mongo/options"
	gomock "go.uber.org/mock/gomock"
)

// MockiFinder is a mock of iFinder interface.
type MockiFinder[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockiFinderMockRecorder[T]
}

// MockiFinderMockRecorder is the mock recorder for MockiFinder.
type MockiFinderMockRecorder[T any] struct {
	mock *MockiFinder[T]
}

// NewMockiFinder creates a new mock instance.
func NewMockiFinder[T any](ctrl *gomock.Controller) *MockiFinder[T] {
	mock := &MockiFinder[T]{ctrl: ctrl}
	mock.recorder = &MockiFinderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiFinder[T]) EXPECT() *MockiFinderMockRecorder[T] {
	return m.recorder
}

// All mocks base method.
func (m *MockiFinder[T]) All(ctx context.Context) ([]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockiFinderMockRecorder[T]) All(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockiFinder[T])(nil).All), ctx)
}

// AllWithOptions mocks base method.
func (m *MockiFinder[T]) AllWithOptions(ctx context.Context, opts []*options.FindOptions) ([]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithOptions", ctx, opts)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithOptions indicates an expected call of AllWithOptions.
func (mr *MockiFinderMockRecorder[T]) AllWithOptions(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithOptions", reflect.TypeOf((*MockiFinder[T])(nil).AllWithOptions), ctx, opts)
}

// One mocks base method.
func (m *MockiFinder[T]) One(ctx context.Context) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// One indicates an expected call of One.
func (mr *MockiFinderMockRecorder[T]) One(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockiFinder[T])(nil).One), ctx)
}

// OneWithOptions mocks base method.
func (m *MockiFinder[T]) OneWithOptions(ctx context.Context, opts []*options.FindOneOptions) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneWithOptions", ctx, opts)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OneWithOptions indicates an expected call of OneWithOptions.
func (mr *MockiFinderMockRecorder[T]) OneWithOptions(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneWithOptions", reflect.TypeOf((*MockiFinder[T])(nil).OneWithOptions), ctx, opts)
}
