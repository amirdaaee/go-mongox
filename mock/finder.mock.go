// Code generated by MockGen. DO NOT EDIT.
// Source: finder.go
//
// Generated by this command:
//
//	mockgen -source=finder.go -destination=../mock/finder.mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	options "go.mongodb.org/mongo-driver/mongo/options"
	gomock "go.uber.org/mock/gomock"
)

// MockiFinder is a mock of iFinder interface.
type MockiFinder[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockiFinderMockRecorder[T]
}

// MockiFinderMockRecorder is the mock recorder for MockiFinder.
type MockiFinderMockRecorder[T any] struct {
	mock *MockiFinder[T]
}

// NewMockiFinder creates a new mock instance.
func NewMockiFinder[T any](ctrl *gomock.Controller) *MockiFinder[T] {
	mock := &MockiFinder[T]{ctrl: ctrl}
	mock.recorder = &MockiFinderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiFinder[T]) EXPECT() *MockiFinderMockRecorder[T] {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockiFinder[T]) FindAll(ctx context.Context) ([]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockiFinderMockRecorder[T]) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockiFinder[T])(nil).FindAll), ctx)
}

// FindAllWithOptions mocks base method.
func (m *MockiFinder[T]) FindAllWithOptions(ctx context.Context, opts []*options.FindOptions) ([]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWithOptions", ctx, opts)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithOptions indicates an expected call of FindAllWithOptions.
func (mr *MockiFinderMockRecorder[T]) FindAllWithOptions(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithOptions", reflect.TypeOf((*MockiFinder[T])(nil).FindAllWithOptions), ctx, opts)
}

// FindOne mocks base method.
func (m *MockiFinder[T]) FindOne(ctx context.Context) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockiFinderMockRecorder[T]) FindOne(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockiFinder[T])(nil).FindOne), ctx)
}

// FindOneWithOptions mocks base method.
func (m *MockiFinder[T]) FindOneWithOptions(ctx context.Context, opts []*options.FindOneOptions) (*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneWithOptions", ctx, opts)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneWithOptions indicates an expected call of FindOneWithOptions.
func (mr *MockiFinderMockRecorder[T]) FindOneWithOptions(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneWithOptions", reflect.TypeOf((*MockiFinder[T])(nil).FindOneWithOptions), ctx, opts)
}
